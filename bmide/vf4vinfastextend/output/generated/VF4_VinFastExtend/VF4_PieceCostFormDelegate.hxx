//@<COPYRIGHT>@
//==================================================
//Copyright $2023.
//Siemens Product Lifecycle Management Software Inc.
//All Rights Reserved.
//==================================================
//@<COPYRIGHT>@

/*==================================================================================================
File description:
    This file contains the declaration for the Business Object, VF4_PieceCostFormDelegate
    Filename:   VF4_PieceCostFormDelegate.hxx
    Module:     VF4_VinFastExtend
    @BMIDE autogenerated
==================================================================================================*/

#ifndef VF4VINFASTEXTEND__VF4_PIECECOSTFORMDELEGATE_HXX
#define VF4VINFASTEXTEND__VF4_PIECECOSTFORMDELEGATE_HXX

#include <common/tc_deprecation_macros.h>
#include <VF4_VinFastExtend/VF4_PieceCostForm.hxx>

#include <VF4_VinFastExtend/libvf4_vinfastextend_exports.h>

namespace vf4vinfastextend
{
    class VF4_PieceCostFormDelegate;
}
namespace vf4vinfastextend
{
    class VF4_PieceCostFormImpl;
}
namespace vf4vinfastextend
{
    class VF4_PieceCostForm;
}
namespace vf4vinfastextend
{
    class VF4_PieceCostFormGenImpl;
}

namespace vf4vinfastextend_alias = ::vf4vinfastextend;


class  VF4_VINFASTEXTEND_API vf4vinfastextend_alias::VF4_PieceCostFormDelegate
{
public:
    //  Method to initialize this Class
    static int initializeClass();

    //  Method to get the VF4_PieceCostFormDelegate instance
    static VF4_PieceCostFormDelegate&  getInstance();

    //  Method to create the VF4_PieceCostFormImpl pointer
    static VF4_PieceCostFormImpl*  createImpl( VF4_PieceCostForm&  ifObj );

    //  Method to delete the VF4_PieceCostFormImpl pointer
    static void deleteImpl( VF4_PieceCostFormImpl*  impl );


    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_ls_total_costBase(const VF4_PieceCostForm &ifObj,  double &value, bool &isNull ) const;


    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_ls_total_costDisplayableValuesBase(VF4_PieceCostForm &ifObj,  std::vector< std::string > &values );


    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pp_total_costBase(const VF4_PieceCostForm &ifObj,  double &value, bool &isNull ) const;


    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pp_total_costDisplayableValuesBase(VF4_PieceCostForm &ifObj,  std::vector< std::string > &values );


    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pto_total_costBase(const VF4_PieceCostForm &ifObj,  double &value, bool &isNull ) const;


    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pto_total_costDisplayableValuesBase(VF4_PieceCostForm &ifObj,  std::vector< std::string > &values );


    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_total_costBase(const VF4_PieceCostForm &ifObj,  double &value, bool &isNull ) const;


    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_total_costDisplayableValuesBase(VF4_PieceCostForm &ifObj,  std::vector< std::string > &values );


    ///
    /// Setter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Value to be set for the parameter
    /// @param isNull - If true, set the parameter value to null
    /// @return - Status. 0 if successful
    ///
    int  setVf4_total_costBase(VF4_PieceCostForm &ifObj,  double value, bool isNull );



protected:
    //  Pointer to the instance
    static VF4_PieceCostFormDelegate*  m_pInstance;

    VF4_PieceCostFormDelegate();
    virtual ~VF4_PieceCostFormDelegate();
    static void setInstance( VF4_PieceCostFormDelegate*  instance );


private:
    friend class  ::vf4vinfastextend::VF4_PieceCostFormGenImpl;

};

#include <VF4_VinFastExtend/libvf4_vinfastextend_undef.h>
#endif  //  VF4VINFASTEXTEND__VF4_PIECECOSTFORMDELEGATE_HXX
