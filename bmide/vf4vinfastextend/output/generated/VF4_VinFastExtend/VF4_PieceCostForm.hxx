//@<COPYRIGHT>@
//==================================================
//Copyright $2023.
//Siemens Product Lifecycle Management Software Inc.
//All Rights Reserved.
//==================================================
//@<COPYRIGHT>@

/*==================================================================================================
File description:
    This file contains the declaration for the Business Object, VF4_PieceCostForm
    Filename:   VF4_PieceCostForm.hxx
    Module:     VF4_VinFastExtend
    @BMIDE autogenerated
==================================================================================================*/

#ifndef VF4VINFASTEXTEND__VF4_PIECECOSTFORM__HXX
#define VF4VINFASTEXTEND__VF4_PIECECOSTFORM__HXX

#include <vector>
#include <common/tc_deprecation_macros.h>
#include <form/Form.hxx>

#include <VF4_VinFastExtend/libvf4_vinfastextend_exports.h>

namespace vf4vinfastextend
{
    class VF4_PieceCostForm;
}
namespace vf4vinfastextend
{
    class VF4_PieceCostFormImpl;
}
namespace vf4vinfastextend
{
    class VF4_PieceCostFormDelegate;
}
namespace vf4vinfastextend
{
    class VF4_PieceCostFormDispatch;
}
namespace vf4vinfastextend
{
    class VF4_PieceCostFormGenImpl;
}
namespace Teamcenter
{
    class RootObjectImpl;
}

class  VF4_VINFASTEXTEND_API  vf4vinfastextend::VF4_PieceCostForm
     : public  ::Teamcenter::Form
{
public:

    /**
     * Get the Interface Name
     * @return - return desc for getInterfaceName
     */
    static const std::string&  getInterfaceName();


    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_ls_total_cost( double &value, bool &isNull ) const;

    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_ls_total_costDisplayableValues( std::vector< std::string > &values );

    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pp_total_cost( double &value, bool &isNull ) const;

    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pp_total_costDisplayableValues( std::vector< std::string > &values );

    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pto_total_cost( double &value, bool &isNull ) const;

    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_pto_total_costDisplayableValues( std::vector< std::string > &values );

    ///
    /// Getter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Parameter Value
    /// @param isNull - Returns true if the Parameter value is null
    /// @return - Status. 0 if successful
    ///
    int  getVf4_total_cost( double &value, bool &isNull ) const;

    ///
    /// Getter for Property Display Value
    /// @version Teamcenter 11.3
    /// @param values - Parameter value
    /// @return - Status. 0 if successful
    ///
    int  getVf4_total_costDisplayableValues( std::vector< std::string > &values );

    ///
    /// Setter for a Double Property
    /// @version Teamcenter 11.3
    /// @param value - Value to be set for the parameter
    /// @param isNull - If true, set the parameter value to null
    /// @return - Status. 0 if successful
    ///
    int  setVf4_total_cost( double value, bool isNull=false );
protected:
    //  Method to initialize
    virtual void initialize( ::Teamcenter::RootObjectImpl*  impl );

    /**
     * Constructor
     */
    VF4_PieceCostForm();

    /**
     * Destructor
     */
    virtual ~VF4_PieceCostForm();

private:
    //  Getter method for the Implementation Object
    VF4_PieceCostFormImpl*  getVF4_PieceCostFormImpl() const;
    //  Setter method for the Implementation Object
    ::Teamcenter::RootObjectImpl*  setVF4_PieceCostFormImpl( ::Teamcenter::RootObjectImpl*  impl );

    //  Method to set the delete impl boolean
    void setDeleteImpl( bool  del );

    // Pointer to the Implementation object
    VF4_PieceCostFormImpl*  m_vf4_piececostformImpl;

    //  Flag to indicate if Implementation object needs to be deleted
    bool  m_deleteImpl;

    /**
     * Name of the Business Object
     */
    static std::string  name;

    /**
     * Private default constructor. We do not want this class instantiated without the business object passed in.
     * @param VF4_PieceCostForm - desc for VF4_PieceCostForm parameter
     */
    VF4_PieceCostForm( const VF4_PieceCostForm& );
    VF4_PieceCostForm& operator=( const VF4_PieceCostForm& );

    friend class  VF4_PieceCostFormDelegate;
    friend class  VF4_PieceCostFormDispatch;
    friend class  VF4_PieceCostFormGenImpl;
};

#include <VF4_VinFastExtend/libvf4_vinfastextend_undef.h>
#endif //   VF4VINFASTEXTEND__VF4_PIECECOSTFORM__HXX
